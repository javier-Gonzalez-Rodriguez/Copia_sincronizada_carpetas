/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package SincronizadorCarpetas;


import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import static java.lang.Thread.sleep;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author javier
 */
public class FolderSincronized extends javax.swing.JFrame {

    /**
     * Creates new form FolderSincronized
     */
    private Thread hilo_aparicion, hilo_proceso;
    private RunProceso p;
    public FolderSincronized() {
        initComponents();
        p = null;
        hilo_aparicion = new Thread(new Interruptor(this));
        hilo_proceso = null;
        TForigen.setText(" ");
        leerArchivo();
    }

    /**
     * leemos el archivo con el origen y el destino y se los asignamos a los TF
     *
     */
    public void leerArchivo() {
        File archivo = new File("configuracion.txt");
        FileReader flujo = null;
        BufferedReader leer = null;
        if (archivo.exists()) {

            try {
                flujo = new FileReader(archivo);
                leer = new BufferedReader(flujo);
                this.TForigen.setText(leer.readLine());
                this.TFdestino.setText(leer.readLine());
            } catch (FileNotFoundException ex) {
                JOptionPane.showMessageDialog(null, ("error al leer archivo " + ex.toString() + " error: 001"), "Error", JOptionPane.ERROR_MESSAGE);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, ("error al leer archivo " + ex.toString() + " error: 002"), "Error", JOptionPane.ERROR_MESSAGE);
            } finally {
                try {
                    flujo.close();
                    leer.close();
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(null, ("error al leer archivo " + ex.toString() + " error: 003"), "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buscador = new javax.swing.JFileChooser();
        jPanel1 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        Borigen = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        Bdestino = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        BGuardar = new javax.swing.JButton();
        Bdetener = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        TForigen = new javax.swing.JTextField();
        TFdestino = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Folder Sincronized");
        setPreferredSize(new java.awt.Dimension(675, 110));
        setResizable(false);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel5.setLayout(new java.awt.GridBagLayout());
        jPanel1.add(jPanel5, java.awt.BorderLayout.NORTH);

        Borigen.setText("Origen");
        Borigen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BorigenActionPerformed(evt);
            }
        });
        jPanel6.add(Borigen);

        jPanel1.add(jPanel6, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jPanel1, java.awt.BorderLayout.WEST);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.GridLayout(1, 0));
        jPanel2.add(jPanel3, java.awt.BorderLayout.NORTH);

        Bdestino.setText("Destino");
        Bdestino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BdestinoActionPerformed(evt);
            }
        });
        jPanel4.add(Bdestino);

        jPanel2.add(jPanel4, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jPanel2, java.awt.BorderLayout.EAST);

        BGuardar.setText("Ejecutar");
        BGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BGuardarActionPerformed(evt);
            }
        });
        jPanel7.add(BGuardar);

        Bdetener.setText("Detener");
        Bdetener.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BdetenerActionPerformed(evt);
            }
        });
        jPanel7.add(Bdetener);

        getContentPane().add(jPanel7, java.awt.BorderLayout.SOUTH);

        jPanel8.setLayout(new java.awt.GridLayout(1, 0, 30, 0));

        TForigen.setAutoscrolls(false);
        TForigen.setEnabled(false);
        jPanel8.add(TForigen);

        TFdestino.setAutoscrolls(false);
        TFdestino.setEnabled(false);
        jPanel8.add(TFdestino);

        getContentPane().add(jPanel8, java.awt.BorderLayout.NORTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * guardamos ruta de origen y destino
     *
     * @param evt
     */
    private void BGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BGuardarActionPerformed
        File archivo = new File("configuracion.txt");
        FileWriter flujo = null;
        PrintWriter escribir = null;

        String origen = TForigen.getText();
        String destino = TFdestino.getText();

        if (!origen.equals(" ")) {
            if (destino.equals("")) {
                destino = "/home/" + obtenerNombre() + "/FolderSincronized";
                File carp = new File(destino);
                if (!carp.exists()) {
                    try {
                        Process p = Runtime.getRuntime().exec("mkdir " + destino);
                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(null, ("error " + ex.toString() + " error: 004"), "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }

            String resultado = origen + "\n" + destino;

            try {
                flujo = new FileWriter(archivo);
                escribir = new PrintWriter(flujo);

                escribir.write(resultado);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, ("error " + ex.toString() + " error: 005"), "Error", JOptionPane.ERROR_MESSAGE);
            } finally {
                try {
                    flujo.close();
                    escribir.close();
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(null, ("error " + ex.toString() + " error: 006"), "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
            generarArchivoContinuarProceso(true);
            
            if (hilo_proceso == null) {
                p = new RunProceso();
                hilo_proceso = new Thread(p);
                hilo_proceso.start();
            }
            
            
            this.setVisible(false);
            if(!hilo_aparicion.isAlive()){
                hilo_aparicion.start();
            }

        } else {
            JOptionPane.showMessageDialog(null, "introduzca carpeta de origen", "Alerta", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_BGuardarActionPerformed

    /**
     * funcion que modifica/crea el archivo continuar necesario para el bucle del proceso ComprobarEscribir....
     * @param continuar definimos el contenido del archivo con este parametro
     */
    private void generarArchivoContinuarProceso(boolean continuar) {
        File archivo = null;
        FileWriter flujo = null;
        PrintWriter escribir = null;

        try {
            archivo = new File("continuar.txt");
            flujo = new FileWriter(archivo);
            escribir = new PrintWriter(flujo);
            escribir.write(continuar + "");
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, ("error al escribir continuar: \n" + ex.toString() + " error: 021"), "Error", JOptionPane.ERROR_MESSAGE);
        } finally {
            try {
                flujo.close();
                escribir.close();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, ("error al cerrar archivos \n" + ex.toString() + " error: 022"), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    /**
     * obtenemos el nombre del usuario
     *
     * @return devolvemos el nombre del usuario
     */
    private static String obtenerNombre() {
        String nombre = "";

        try {
            Process p = Runtime.getRuntime().exec("who");
            BufferedReader leer = new BufferedReader(new InputStreamReader(p.getInputStream()));
            String n = leer.readLine();
            String splitnombre[] = n.split(" ");
            nombre = splitnombre[0];
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, ("error al obtener nombre" + ex.toString() + " error: 007"), "Error", JOptionPane.ERROR_MESSAGE);
        }

        return nombre;
    }

    /**
     * abrimos un cuadro de dialogo JFileChooser para coger la carpeta de origen
     *
     * @param evt
     */
    private void BorigenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BorigenActionPerformed
        JFileChooser buscador = this.buscador;
        buscador.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int aceptar = buscador.showOpenDialog(this);

        if (aceptar == JFileChooser.APPROVE_OPTION) {
            TForigen.setText(buscador.getSelectedFile().toString());
        }

    }//GEN-LAST:event_BorigenActionPerformed

    /**
     * abrimos un cuadro de dialogo JFileChooser para coger la carpeta de
     * destino
     *
     * @param evt
     */
    private void BdestinoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BdestinoActionPerformed
        JFileChooser buscador = this.buscador;
        buscador.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int aceptar = buscador.showOpenDialog(this);

        if (aceptar == JFileChooser.APPROVE_OPTION) {
            TFdestino.setText(buscador.getSelectedFile().toString());
        }
    }//GEN-LAST:event_BdestinoActionPerformed

    /**
     * detinene el hilo de aparicion de la interfaz grafica y  destrulle a esta
     * @param evt 
     */
    private void BdetenerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BdetenerActionPerformed
        generarArchivoContinuarProceso(false);
        hilo_aparicion.suspend();
        hilo_aparicion.stop();
        this.dispose();
    }//GEN-LAST:event_BdetenerActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FolderSincronized.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FolderSincronized.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FolderSincronized.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FolderSincronized.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FolderSincronized().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BGuardar;
    private javax.swing.JButton Bdestino;
    private javax.swing.JButton Bdetener;
    private javax.swing.JButton Borigen;
    private javax.swing.JTextField TFdestino;
    private javax.swing.JTextField TForigen;
    private javax.swing.JFileChooser buscador;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    // End of variables declaration//GEN-END:variables

    public class Interruptor implements Runnable {

        private FolderSincronized FS;
        private boolean continuar;

        public Interruptor(FolderSincronized FS) {
            this.FS = FS;
            continuar = true;
        }

        @Override
        public void run() {

            try {
                while (continuar) {
                    // 1 hora => 60 minutos
                    sleep(3600000);

                    FS.setVisible(true);

                }
            } catch (InterruptedException ex) {
                JOptionPane.showMessageDialog(null, ("error en hilo" + ex.toString() + " error: 018"), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }

    }

}

//ultimo error 22
